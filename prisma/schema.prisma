// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Models
// https://next-auth.js.org/v3/adapters/models
// The Account model is for information about OAuth accounts associated with a User.
// A single User can have multiple Accounts, each Account can only have one User.
model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// The Session model is used for database sessions. It is not used if JSON Web Tokens are enabled.
// A single User can have multiple Sessions, each Session can only have one User.
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// The User model is for information such as the users name and email address.
// Email address are optional, but if one is specified for a User then it must be unique.
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// The Verification Request model is used to store tokens for passwordless sign in emails.
// A single User can have multiple open Verification Requests (e.g. to sign in to different devices).
// It has been designed to be extendable for other verification purposes in future (e.g. 2FA / short codes).
model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// @auth/prisma-adapter
// https://authjs.dev/reference/adapter/prisma
//
// id  String  @id @default(auto()) @map("_id") @db.ObjectId
// 